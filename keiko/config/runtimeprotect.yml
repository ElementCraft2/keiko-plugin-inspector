#### Keiko: Runtime Protect Configuration #########################################
#
#   Welcome here!
#
#   This file lets you configure Keiko Runtime Protect - the part of Keiko
# responsible for protecting your server at runtime. In particular, this config
# lets you customize Keiko Domain Access Control (DAC) to monitor and/or restrict
# access to Internet connectivity, files, and more.
#
#   Useful stuff:
#
#     1. Keiko Wiki (a lot of useful information):
#        --> https://github.com/MeGysssTaa/keiko-plugin-inspector/wiki
#
#     2. Keiko Discord (for questions, discussion, and live support):
#        --> https://discord.gg/QWHzCXX
#
###################################################################################




# Keiko Megane is a heuristic-based runtime protection mechanism that detects suspicious
# behavior of plugins while your server is running. It is able to recognize a variety of
# threats, and sometimes even remediate the damage they have done. For details visit:
# https://github.com/MeGysssTaa/keiko-plugin-inspector/wiki/Keiko-Megane
megane:
  enabled: true
  heur:
    force_op:
      enabled: true
      remediate: true
      exclusions: []
    book_backdoor:
      enabled: true




# Keiko Domain Access Control (custom Java SecurityManager) settings.
#
# This feature provides you nearly a full control of what specific plugins,
# classes and methods are allowed to do and in which manner.
#
# IMPORTANT NOTE: Keiko blocks access by throwing a SecurityException when it detects
#                 a call that should be filtered out. This may lead to loss of functionality
#                 or specific bugs in some plugins. Use with care if you don't want to break anything!
domain_access_control:

  # Enable DAC?
  enabled: true

  # Should Keiko protect its work dir (.../plugins/Keiko) from unauthorized external access? How?
  # Keeping this active is STRONGLY RECOMMENDED. It will keep Keiko protected even if you break the
  # other parts of Domain Access Control (though this only has effect if DAC itself is enabled).
  #
  # BY DISABLING THIS YOU ARE LETTING POTENTIAL MALWARE TO ABUSE KEIKO'S CACHING, TWEAK
  # ITS CONFIGURATION, AND SPOOF OTHER STUFF, THUS PUTTING YOUR SERVER UNDER SERIOUS RISK!
  self_defense: true

  # Internet connectivity control.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <host> PORT <port>
  #
  # Examples:
  #
  #     # Allow plugin "SomeGooglePlugin" to open connections on host "https://google.com" on default HTTPS port (443):
  #     - ALLOW PLUGIN=SomeGooglePlugin https://google.com PORT HTTPS
  #
  #     # Forbid all plugins to open connections on host "http://some-fishy-host.io" on port 12345:
  #     - DENY ALL http://some-fishy-host.io PORT 12345
  #
  # TIP: you can use the following placeholders instead of port numbers:
  #
  #     Placeholder    Port
  #     =====================
  #     HTTP           80
  #     HTTP_ALT       8080
  #     HTTPS          443
  #     FTP            21
  #     SFTP           22
  #     SSH            22
  connection_open:
    log: off
    rules:
      - ALLOW ALL * PORT *

  # Connection listen (the process of your server waiting for a connection from outside) control.
  #
  # Rules syntax:
  #
  #     same as in connection_open, examples can also be found there
  #     EXCEPTION: host must always be equal to "localhost", i.e. actual syntax
  #                turns into: <"ALLOW"/"DENY"> <identity> localhost PORT <port>
  #
  # TIP: see connection_open for port placeholders.
  connection_listen:
    log: off
    rules:
      - ALLOW ALL localhost PORT *

  # Connection accept (the process of your server accepting a connection that it has been waiting for outside) control.
  #
  # Rules syntax:
  #
  #     same as in connection_open, examples can also be found there
  #
  # TIP: see connection_open for port placeholders.
  connection_accept:
    log: off
    rules:
      - ALLOW ALL * PORT *

  # Connection (join/leave/send/receive) IP multicast control.
  #
  # Rules syntax:
  #
  #     same as in connection_open, examples can also be found there
  #     EXCEPTION: port must always be equal to "*", i.e. actual syntax
  #                turns into: <"ALLOW"/"DENY"> <identity> <host> PORT *
  connection_multicast:
    log: off
    rules:
      - ALLOW ALL * PORT *

  # Java SocketFactory set control.
  #
  # Overriding default system's SocketFactory may allow hackers to monitor your whole
  # server networking in details, and sometimes even modify/interrupt it.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> *
  #     (the asterisk * does not mean anything here but is required - it just has to be there, keep that in mind)
  #
  # Examples:
  #
  #     # Allow method "sendEncryptedMsg" of class "Chattor" in package "com.mcchattor" to modify system's SocketFactory:
  #     - ALLOW SOURCE=com.mcchattor.Chattor#sendEncryptedMsg *
  #
  #     # Forbid plugin "not-malware-trust-me' to modify system's SocketFactory:
  #     - DENY PLUGIN=not-malware-trust-me *
  socket_factory_set:
    log: warning
    rules:
      - DENY ALL *

  # File write control.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <file name>
  #
  # Examples:
  #
  #     # Allow all plugins to create any files in their plugins/ folder:
  #     - ALLOW ALL {server_folder}/plugins/{plugin_name}
  #
  #     # Forbid plugin "NotMalware4sure" to write in server's "server.properties" file:
  #     - DENY PLUGIN=NotMalware4sure {server_folder}/server.properties
  file_write:
    log: off
    rules:
      - DENY ALL *
      - ALLOW ALL {server_folder}/plugins/{plugin_name}
      - ALLOW ALL {server_folder}/plugins/{plugin_name}/*
      - ALLOW ALL /tmp
      - ALLOW ALL /tmp/*

  # File read control.
  #
  # Rules syntax:
  #
  #     same as in file_write, examples can also be found there
  file_read:
    log: off
    rules:
      - ALLOW ALL *

  # File deletion control.
  #
  # Rules syntax:
  #
  #     same as in file_write, examples can also be found there
  file_delete:
    log: off
    rules:
      - DENY ALL *
      - ALLOW ALL {server_folder}/plugins/{plugin_name}
      - ALLOW ALL {server_folder}/plugins/{plugin_name}/*
      - ALLOW ALL /tmp
      - ALLOW ALL /tmp/*

  # Runtime natives load/linkage control.
  #
  # "Natives" are extra files with code written in languages other than Java (e.g. C, C++)
  # that allow Java software to perform something out of JVM. This is very rarely used by
  # plugins, but may be abused by hackers to bypass Keiko Domain Access Control restrictions.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <library name or file path>
  #
  # Examples:
  #
  #     # Allow plugin "some-ccp-plugin" to load native library from file "stuff.dll" in its folder in plugins/:
  #     - ALLOW PLUGIN=some-cpp-plugin {server_folder}/plugins/{plugin_name}/stuff.dll
  #
  #     # Forbid method "prepareNatives" of Java class "NativeRAT" in package "xyz.some.cool.plugin" to load any natives:
  #     - DENY SOURCE=xyz.some.cool.plugin.NativeRAT#prepareNatives *
  natives_linkage:
    log: warning
    rules:
      - DENY ALL *
      - ALLOW ALL sunec

  # System command execution control.
  #
  # WARNING: this controls execution of SYSTEM commands (like "echo", "rm", "cd", "wget", "grep", etc.), NOT
  #          of Minecraft console commands. That is, plugins should never normally use such (system) commands,
  #          as those can be used to harm your server and bypass Keiko Domain Access Control restrictions.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <command>
  #
  # Examples:
  #
  #     # Allow plugin "ShellSimulator" to execute "rm <file name>" (where "file name" may be anything - any file):
  #     - ALLOW PLUGIN=ShellSimulator rm *
  #
  #     # Forbid all plugins to execute "wget http://some-fishy-host.io/rat.jar":
  #     - DENY ALL wget http://some-fishy-host.io/rat.jar
  command_execution:
    log: warning
    rules:
      - DENY ALL *

  # Forceful inappropriate system exit control.
  #
  # Plugins should not shutdown your server normally. And even if they do, they must use the appropriate
  # Bukkit#shutdown() method for that since System.exit/Runtime.getRuntime().exit do not let the server
  # to finish its workflow properly, thus leading to unexpected issues/bugs such as server not responding
  # to commands (including Ctrl+C) and not performing world save.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <exit code/status>
  #     NOTE: you should not rely on exit code - we advise you to block all statuses with an asterisk * mask,
  #           because malicious plugins' developers can easily change this number in code thus bypassing this check.
  #
  # Examples:
  #
  #     # Allow all plugins to perform system exit with code 1337:
  #     - ALLOW ALL 1337
  #
  #     # Forbid plugin "UntrustedPlugin" to perform system exit with any status code:
  #     - DENY PLUGIN=UntrustedPlugin *
  system_exit:
    log: warning
    rules:
      - DENY ALL *

  # JVM system properties access (read/write) control.
  #
  # This only affects methods System#getProperties() and System#setProperties(Properties),
  # which allow to read and overwrite all system properties at once, which may sometimes be unsafe.
  # This does not block individual property access, e.g. setProperty(..., ...) or getProperty(...).
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> *
  #     (the asterisk * does not mean anything here but is required - it just has to be there, keep that in mind)
  #
  # Examples:
  #
  #     # Allow class "TrustedUtil" in package "com.trusted.plugin.util" to get and set all system properties at once:
  #     - ALLOW SOURCE=com.trusted.plugin.util.TrustedUtil *
  #
  #     # Deny all plugins to get and set all system properties at once:
  #     - DENY ALL *
  properties_access:
    log: off
    rules:
      - ALLOW ALL *

  # Individual JVM system property write control.
  #
  # This affects method System.setProperty.
  # Plugins may often need to write or read some particular system properties.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <property name>
  #
  # Examples:
  #
  #     # Allow all plugins to write any system properties:
  #     - ALLOW ALL *
  #
  #     # Forbid plugin "RandomDownloadedPlugin" to change any system properties that start with "ftp.":
  #     - DENY PLUGIN=RandomDownloadedPlugin ftp.*
  property_write:
    log: off
    rules:
      - ALLOW ALL *
      - DENY ALL http.proxyHost
      - DENY ALL http.proxyPort
      - DENY ALL https.proxyHost
      - DENY ALL https.proxyPort
      - DENY ALL ftp.proxyHost
      - DENY ALL ftp.proxyPort
      - DENY ALL socksProxyHost
      - DENY ALL socksProxyPort

  # Individual JVM system property read control.
  #
  # This affects method System.getProperty.
  # Plugins may often need to write or read some particular system properties.
  #
  # Rules syntax:
  #
  #     same as in property_write, examples can also be found there
  property_read:
    log: off
    rules:
      - ALLOW ALL *

  # Java package (code location) access control.
  #
  # Controls plugins' access to particular packages on the classpath.
  # Can be used to prevent a plugin from calling a function from another
  # plugin, or, for example, to prevent all plugins from interacting with
  # Keiko directly.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <package name>
  #
  # Examples:
  #
  #     # Allow all plugins to access all packages on the classpath:
  #     - ALLOW ALL *
  #
  #     # Forbid all plugins to access Keiko's package (so that they cannot hack Keiko programmatically):
  #     - DENY ALL me.darksidecode.keiko.*
  package_access:
    log: off
    rules:
      - ALLOW ALL *
      - DENY ALL me.darksidecode.keiko.*
      - DENY ALL keiko_internals.*

  # Java class (code container) access control.
  #
  # Controls plugins' access to particular classes on the classpath.
  # Can be used to prevent a plugin from calling a function from another
  # plugin, or, for example, to prevent all plugins from interacting with
  # Keiko directly.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <fully qualified class name>
  #
  # Examples:
  #
  #     # Allow all plugins to access all classes on the classpath:
  #     - ALLOW ALL *
  #
  #     # Forbid all plugins to access Keiko's main class:
  #     - DENY ALL me.darksidecode.keiko.proxy.Keiko
  class_access:
    log: off
    rules:
      - ALLOW ALL *
      - DENY ALL me.darksidecode.keiko.*
      - DENY ALL keiko_internals.*

  # Minecraft op control.
  #
  # Controls plugins' ability to give certain players the server operator (OP) status.
  # Can be used as an "anti force op" at runtime.
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <player name>
  #
  # Examples:
  #
  #     # Allow plugin "LuckPerms" to give the server operator (OP) status to any player:
  #     - ALLOW PLUGIN=LuckPerms *
  #
  #     # Deny all plugins to op player with name SomeFishyDev:
  #     - DENY ALL SomeFishyDev
  minecraft_op_add:
    log: warning
    rules:
      - DENY ALL *

  # Minecraft de-op control.
  #
  # Controls plugins' ability to remove the server operator (OP) status from certain players.
  # Can be used as an "anti force op" or as some "admin protection" at runtime.
  #
  # Rules syntax:
  #
  #     same as in minecraft_op_add, examples can also be found there
  minecraft_op_remove:
    log: warning
    rules:
      - DENY ALL *

  # Minecraft server command execution control.
  #
  # Controls plugins' ability to dispatch Minecraft server
  # or plugins commands (including "/op", "/deop", ...).
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <command>
  #
  # Examples:
  #
  #     # Allow plugin "LuckPerms" to execute Minecraft command "/op" to op any player:
  #     - ALLOW PLUGIN=LuckPerms op *
  #
  #     # Deny plugin "SomeFishyPlugin" to execute command "/give SomeFishyDev minecraft:diamond 64":
  #     - DENY PLUGIN=SomeFishyPlugin give SomeFishyDev minecraft:diamond 64
  minecraft_command_dispatch:
    log: info
    rules:
      - ALLOW ALL *
      - DENY ALL op *
      - DENY ALL deop *
      - DENY ALL pex *
      - DENY ALL lp *
      - DENY ALL permission*
      - DENY ALL luckperms*
      - DENY ALL promote*

  # Miscellaneous JVM actions (permissions) control.
  #
  # Allows to control plugins' access to specific JVM permissions.
  # Most of the actions blocked by the default set of rules are potentially
  # unsafe and should not be used by ordinary plugins in normal scenarios.
  # Learn more: https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html
  #
  # Rules syntax:
  #
  #     <"ALLOW"/"DENY"> <identity> <JVM permission name>
  #
  # Examples:
  #
  #     # Allow plugin "ProtocolLib" to create own Java class loaders:
  #     - ALLOW PLUGIN=ProtocolLib createClassLoader
  #
  #     # Forbid all plugins to execute any JVM actions whose name starts with "doAs":
  #     - DENY ALL doAs*
  miscellaneous:
    log: off
    rules:
      - ALLOW ALL *
      - DENY ALL createClassLoader
      - DENY ALL setContextClassLoader
      - DENY ALL enableContextClassLoaderOverride
      - DENY ALL closeClassLoader
      - DENY ALL setSecurityManager
      - DENY ALL createSecurityManager
      - DENY ALL shutdownHooks
      - DENY ALL setIO
      - DENY ALL usePolicy
      - DENY ALL setDefaultAuthenticator
      - DENY ALL requestPasswordAuthentication
      - DENY ALL setProxySelector
      - DENY ALL hard
      - DENY ALL symbolic
      - DENY ALL createAccessControlContext
      - DENY ALL setPolicy
      - DENY ALL insertProvider
      - DENY ALL doAs
      - DENY ALL doAsPrivileged
      - DENY ALL modifyPrincipals
      - DENY ALL setLoginConfiguration
      - DENY ALL setProperty.*
